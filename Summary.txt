Arpan Rakesh Patel
Late Days Left: 4

Assignment Summary:

The purpose of this assignment was to develop a server program that acts as a key-value store and provides basic operations such as PUT, GET, and DELETE to the client. The server implementation incorporates two communication protocols: UDP and TCP. The client should be able to communicate with the server using either UDP or TCP, and handle server failures by implementing a timeout mechanism. Additionally, both the client and server should be robust to malformed packets. In the implementation, command line arguments are used to provide the server's hostname or IP address and the port number. This allows the client to connect to the server. To handle server failures, a timeout mechanism is implemented. The client also handles malformed or unrequested datagram packets gracefully to maintain robustness. To enhance usability, the client logs each action with a timestamp, providing a clear record of client-server interactions. Two instances of the client program are created, one using TCP and the other using UDP, to demonstrate the usage of both protocols. It emphasizes error handling, including robustness against malformed packets and server failures. By incorporating timeout mechanisms, timestamped logging, and appropriate validation checks, the client and server programs are designed to provide a reliable and user-friendly experience.

Technical Impression:

In this assignment, I had the opportunity to get into the practical aspects of building a server-client system. The main objective was to implement a key-value store where clients could interact with the server by performing basic operations such as PUT, GET, and DELETE. To accomplish this, I needed to understand and utilize different communication protocols, namely UDP and TCP. This involved learning about the underlying mechanisms of these protocols and how they facilitate data transfer between the client and server. The materials provided for the course opted to be very useful one. In order to store the key-value pairs, I made use of a file called map.properties. This file acted as a storage mechanism, allowing me to easily read and write data using input and output streams. By leveraging these streams, I could efficiently manage the data within the key-value store. To ensure the system worked smoothly, I implemented several helper methods. These methods were responsible for logging the requests, responses, and any errors that occurred during the communication process. By carefully tracking and documenting these events, it became easier to troubleshoot and provide accurate feedback to clients.

Throughout the assignment, I encountered various challenges related to error handling, packet formatting, and timing. I had to ensure that the server and client could handle malformed packets and respond appropriately. Additionally, I incorporated a timeout mechanism to handle server failures, allowing the client to gracefully recover from unresponsive situations. This project provided a valuable learning experience, allowing me to deepen my understanding of network programming concepts. I gained practical knowledge about socket communication, server responsiveness, and effectively managing different types of requests. These skills will undoubtedly prove beneficial in future projects that involve more complex functionalities and systems. Overall, this assignment not only helped me to expand my technical skills but also helped solidify my understanding of client-server architectures and network protocols. It was a great experience that provided practical insights into building robust and efficient systems for communication and data management.